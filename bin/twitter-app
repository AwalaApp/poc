#!/usr/bin/env node
'use strict';
// This is a proof of concept. The code below is ugly, inefficient and has no tests.

const Endpoint = require('../core/endpoint');
const fs = require('fs');
const PogRPCClient = require('../PogRPC/client');
const readline = require('readline');
const TwitterClient = require('../twitter-service/client');
const {getAddressFromCert} = require('../core/pki');
const {TweetMessage, deserializeMessage, serializeMessage} = require('../twitter-service/service_messages');

require('dotenv').config();

const CERT_PATH = __dirname + '/../certs/twitter-app.cert.pem';
const KEY_PATH = __dirname + '/../certs/twitter-app.key.pem';

const GATEWAY_ADDRESS = '127.0.0.1:1473';
const ENDPOINT_ADDRESS = getAddressFromCert(fs.readFileSync(CERT_PATH));

async function main() {
    const pdnClient = new PogRPCClient(GATEWAY_ADDRESS, ENDPOINT_ADDRESS, false); // MUST only use TLS in production
    const endpoint = new Endpoint(CERT_PATH, KEY_PATH, pdnClient, serializeMessage, deserializeMessage);
    const twitterClient = new TwitterClient(
        process.env.TWITTER_ACCESS_TOKEN_KEY,
        process.env.TWITTER_ACCESS_TOKEN_SECRET,
        endpoint,
    );

    await twitterClient.subscribeToTimeline();

    await printCollectedMessages(endpoint.collectMessages());

    console.log('');

    const tweetStatus = await promptTweetStatus();
    if (tweetStatus) {
        const tweet = TweetMessage.create({status: tweetStatus});
        await twitterClient.postTweet(tweet);
        console.log('✔️ Tweet added to queue.')
    }
}

function promptTweetStatus() {
    const rlInterface = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise((resolve) => {
        rlInterface.question('What would you like to tweet? (optional)\n', (tweetStatus) => {
            rlInterface.close();
            resolve(tweetStatus || null);
        });
    });
}

/**
 * @param {AsyncIterableIterator<Message>} messages
 * @returns {Promise<void>}
 */
async function printCollectedMessages(messages) {
    console.log('New Tweets:');
    let anyTweet;
    for await (const message of messages) {
        if (message.$type.name !== 'Tweet') {
            console.warn(`${message} was received but it isn't a tweet`);
            break;
        }

        console.log(`- ${message.author} said: ${message.status}`);
        anyTweet = true;
    }

    if (!anyTweet) {
        console.log('(no new tweets)')
    }
}

(async () => await main())();
